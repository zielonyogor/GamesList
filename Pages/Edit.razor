@page "/edit/{id:int}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<nav>
    <a href="/" class="title">MY GAMES LIST</a>
    <a href="addgame" class="icon"><i class="fa-solid fa-plus fa-sm"></i></a>
</nav>

<main>
    <div class="row">
        <div class="col-4">
            <div class="card-info">
                    <div class="card-info-bar">
                        <h3>Edit your game</h3>
                    </div>
                    <div class="card-info-body">
                        <div class="row card-info-row">
                            <div class="col-3">
                                Title:
                            </div>
                            <div class="col-auto">
                                <InputText @bind-Value="editedGame.Title" class="game-input" />
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Rating:
                            </div>
                            <div class="col-auto">
                                <InputNumber @bind-Value="editedGame.Rating" class="game-input" />
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Release Date:
                            </div>
                            <div class="col-auto">
                                <InputDate @bind-Value="editedGame.ReleaseTime" class="game-input" />
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Playing Since:
                            </div>
                            <div class="col-auto">
                                <InputDate @bind-Value="editedGame.PlayingSinceTime" class="game-input" />
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Tags:
                            </div>
                            <div class="col-auto">
                                <span>
                                    @for (int i = 0; i < editedGame.Tags.Count; i++)
                                    {
                                        @editedGame.Tags[i]@(i < editedGame.Tags.Count - 1 ? ", " : "")
                                    }
                                </span>
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Desc:
                            </div>
                            <div class="col-auto">
                                <InputTextArea @bind-Value="editedGame.Description" class="game-input" placeholder="describe your game here"/>
                            </div>
                        </div>
                    </div>
                    <button class="btn-confirm" @onclick="SaveGame">Add game</button>
            </div>
        </div>
        <div class="col-3 helper-window">
            <div class="card-info">
                <div class="card-info-bar mb-0">
                      <h4>Image URL</h4>
                </div>
                <InputText class="url-input" @bind-Value="editedGame.ImageUri" placeholder="enter your url here" />

                <img class="image-preview" src="@editedGame.ImageUri">
            </div>
        </div>
        <div class="col-3">
            <div class="card-info">
                <div class="card-info-bar mb-0">
                    <h4>Choose your game tags:</h4>
                </div>
                <div class="card-info-body">
                    @foreach(var tag in tags)
                    {
                        <div class="tag-select">
                            <a class="tag-name" @onclick="@(e => AddTag(@tag))">@tag</a> 
                            @if(editedGame.Tags.Contains(tag))
                            {
                                <a class="btn-delete-tag" @onclick="@(e => DeleteTag(@tag))">X</a>
                            }
                        </div>
                    }
                </div>
                <div class="tag-input">
                    <input class="tag-search" type="text" placeholder="or add new tag..." @bind="newTag" @onkeyup="OnKeyPressed">
                    <a class="btn-add-tag" @onclick="AddNewTag">></a>
                </div>
            </div>
        </div>
    </div>
</main>

@* 
<nav class="navbar bg-body-tertiary">
     <div class="container-fluid align-items-stretch p-0">
        <a class="h1 mb-0 px-3 align-content-center" href="/">MY GAMES LIST</a>
        <div class="search-bar flex-grow-1"></div>
        <a href="addgame" class="btn btn-outline-success align-content-center" >Add</a>
    </div>
</nav>

<div class="container p-4">
    <div class="row">
        <div class="card col-5 me-5 p-0" style="height: 80vh;">
            <div class="card-title h3 d-flex">
                <span class="flex-grow-1 m-2">Edit your game</span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3 data-label">
                        Game Title
                    </div>
                    <div class="col-9 fs-5">
                        <InputText @bind-Value="editedGame.Title" class="w-100 input-field" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Release date:
                    </div>
                    <div class="col-9 fs-5">
                        <InputDate @bind-Value="editedGame.ReleaseTime" class="w-100 input-field border-0" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Playing since:
                    </div>
                    <div class="col-9 fs-5">
                        <InputDate @bind-Value="editedGame.PlayingSinceTime" class="w-100 input-field border-0" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Desc:
                    </div>
                    <div class="col-9 fs-5">
                        <InputTextArea @bind-Value="editedGame.Description" class="w-100 input-field" style="resize: none; height: 100px" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Rating:
                    </div>
                    <div class="col-9 fs-5">
                        <InputNumber @bind-Value="editedGame.Rating" class="w-100 input-field" />    
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Tags:
                    </div>
                    <div class="col-9 align-items-start d-flex">
                        <span class="d-block col-10 h-100  fs-5" >
                            @for (int i = 0; i < editedGame.Tags.Count; i++)
                            {
                                @editedGame.Tags[i]@(i < editedGame.Tags.Count - 1 ? ", " : "")
                            }
                        </span>
                    </div>
                </div>
            </div>
            <button class="btn btn-save" @onclick="SaveGame">SAVE</button>
        </div>
        <div class="col">
            <div class="card" style="width: calc(200px + 8rem); height: calc(200px + 6rem);">
                <div class="row my-3 px-3">
                        <div class="col-4">
                            Image URL:
                        </div>
                        <div class="col-8">
                            <InputText @bind-Value="editedGame.ImageUri" class="w-100 input-field" />
                        </div>
                </div>
                @if(false)
                {

                }
                else
                {
                    <span class="align-self-center h6">Enter a valid photo URL</span>
                }
            </div>
            <div class="card mt-5" style="width: calc(160px + 5rem);">
                <div class="card-title px-2 py-2 m-0">Choose your tags:</div>
                @foreach(var tag in tags)
                {
                    <div class="justify-content-evenly">
                        <div class="d-flex">
                            <a class="flex-grow-1 dropdown-item py-2" @onclick="@(e => AddTag(@tag))">@tag</a> 
                            @if(editedGame.Tags.Contains(tag))
                            {
                                <a class="btn btn-danger" @onclick="@(e => DeleteTag(@tag))">X</a>
                            }
                        </div>
                    </div>
                }
                <input class="border-0 px-3 py-2 tag-add-input" type="text" placeholder="or add new tag..." @bind="newTag" @onkeyup="OnKeyPressed">
            </div>
        </div>

    </div>
</div> *@

@code {
    [Parameter] public int id { get; set; }
    GameDto editedGame = new GameDto();

    List<string> tags = new List<string>();
    List<string> originalTagList;

    string newTag;

    protected override async Task OnInitializedAsync()
    {
        editedGame = await HttpClient.GetFromJsonAsync<GameDto>($"{NavigationManager.BaseUri}api/games/{id}");
        tags = await HttpClient.GetFromJsonAsync<List<string>>(NavigationManager.BaseUri + "api/tags") ?? tags;
        originalTagList = new List<string>(tags);
    }

    public async Task SaveGame()
    {
        var response = await HttpClient.PutAsJsonAsync($"{NavigationManager.BaseUri}api/games/{id}", editedGame);
        if(response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("hmmmm");
        }
    }

    public void AddTag(string name)
    {
        if(!editedGame.Tags.Contains(name) && name is not "")
        {
            editedGame.Tags.Add(name); 
            StateHasChanged();
            if(!tags.Contains(name))
            {
                tags.Add(name);
            }
        }
    }

    public void OnKeyPressed(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            string tempString = newTag;
            AddTag(tempString);
            newTag = "";
            StateHasChanged();
        }
    }

    public void AddNewTag()
    {
        if(!string.IsNullOrWhiteSpace(newTag))
        {
            string tempString = newTag.Trim();
            AddTag(tempString);
            newTag = "";
            StateHasChanged();            
        }
    }

    public void DeleteTag(string name)
    {
        editedGame.Tags.Remove(name);
        foreach(var i in originalTagList)
        {
            Console.WriteLine(i);
        }
        if(!originalTagList.Contains(name))
        {
            Console.WriteLine("Deleting " + name);
            tags.Remove(name);
        }
    }
}