@page "/addgame"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<nav class="navbar bg-body-tertiary">
     <div class="container-fluid align-items-stretch p-0">
        <a class="h1 mb-0 px-3 align-content-center" href="/">MY GAMES LIST</a>
        <div class="search-bar flex-grow-1"></div>
        <a href="addgame" class="btn btn-outline-success align-content-center" >Add</a>
    </div>
</nav>

<div class="container p-4">
    <div class="row">
        <div class="card col-5 me-5 p-0" style="height: 80vh;">
            <div class="card-title h3 d-flex">
                <span class="flex-grow-1 m-2">Add your new game</span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-3 data-label">
                        Game Title
                    </div>
                    <div class="col-9 fs-5">
                        <InputText @bind-Value="newGame.Title" class="w-100 input-field" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Release date:
                    </div>
                    <div class="col-9 fs-5">
                        <InputDate @bind-Value="newGame.ReleaseTime" class="w-100 input-field border-0" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Playing since:
                    </div>
                    <div class="col-9 fs-5">
                        <InputDate @bind-Value="newGame.PlayingSinceTime" class="w-100 input-field border-0" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Desc:
                    </div>
                    <div class="col-9 fs-5">
                        <InputTextArea @bind-Value="newGame.Description" class="w-100 input-field" style="resize: none; height: 100px" />
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Rating:
                    </div>
                    <div class="col-9 fs-5">
                        <InputNumber @bind-Value="newGame.Rating" class="w-100 input-field" />    
                    </div>
                </div>
                <div class="row my-3">
                    <div class="col-3 data-label">
                        Tags:
                    </div>
                    <div class="col-9 align-items-start d-flex fs-5">
                        <span class="d-block col-10 h-100  fs-5" >
                            @for (int i = 0; i < newGame.Tags.Count; i++)
                            {
                                @newGame.Tags[i]@(i < newGame.Tags.Count - 1 ? ", " : "")
                            }
                        </span>
                    </div>
                </div>
            </div>
            <button class="btn btn-save" @onclick="AddGame">ADD</button>
        </div>
        <div class="col">
            <div class="card" style="width: calc(200px + 8rem); height: calc(200px + 6rem);">
                <div class="row my-3 px-3">
                        <div class="col-4">
                            Image URL:
                        </div>
                        <div class="col-8">
                            <InputText @bind-Value="newGame.ImageUri" class="w-100 input-field" />
                        </div>
                </div>
                @if(false)
                {

                }
                else
                {
                    <span class="align-self-center h6">Enter a valid photo URL</span>
                }
            </div>
            <div class="card mt-5" style="width: calc(160px + 5rem);">
                <div class="card-title px-2 py-2 m-0">Choose your tags:</div>
                @foreach(var tag in tags)
                {
                    <div class="justify-content-evenly">
                        <div class="d-flex">
                            <a class="flex-grow-1 dropdown-item py-2" @onclick="@(e => AddTag(@tag))">@tag</a> 
                            @if(newGame.Tags.Contains(tag))
                            {
                                <a class="btn btn-danger" @onclick="@(e => DeleteTag(@tag))">X</a>
                            }
                        </div>
                    </div>
                }
                <input class="border-0 px-3 py-2 tag-add-input" type="text" placeholder="or add new tag..." @bind="newTag" @onkeyup="OnKeyPressed">
            </div>
        </div>

    </div>
    @if(message != String.Empty)
    {
        <h5 class="h5">@message</h5>
    }
</div>

@code {

    string message = String.Empty;
    GameDto newGame = new GameDto{
        ReleaseTime = DateOnly.FromDateTime(DateTime.Now),
        PlayingSinceTime = DateOnly.FromDateTime(DateTime.Now)
    };
    List<string> tags = new List<string>();
    List<string> originalTagList;

    string newTag;
    
    protected override async Task OnInitializedAsync()
    {
        tags = await HttpClient.GetFromJsonAsync<List<string>>(NavigationManager.BaseUri + "api/tags") ?? tags;
        originalTagList = new List<string>(tags);
    }

    public async Task AddGame()
    {
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/games", newGame);
        if(response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = "Something went wrong, try again";
        }
    }

    public void AddTag(string name)
    {
        if(!newGame.Tags.Contains(name) && name is not "")
        {
            newGame.Tags.Add(name); 
            StateHasChanged();
            if(!tags.Contains(name))
            {
                tags.Add(name);
            }
        }
    }

    public void OnKeyPressed(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            string tempString = newTag;
            AddTag(tempString);
            newTag = "";
            StateHasChanged();
        }
    }

    public void DeleteTag(string name)
    {
        newGame.Tags.Remove(name);
        foreach(var i in originalTagList)
        {
            Console.WriteLine(i);
        }
        if(!originalTagList.Contains(name))
        {
            Console.WriteLine("Deleting " + name);
            tags.Remove(name);
        }
        //StateHasChanged();
    }
}