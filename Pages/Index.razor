@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@using GamesList

<nav>
    <a href="/" class="title">MY GAMES LIST</a>
    <span class="icon"><i class="fa-solid fa-magnifying-glass fa-xs"></i></span>
    <input class="search-bar" placeholder="search name or tag..." @oninput="ShowGames" />
    <a href="addgame" class="icon"><i class="fa-solid fa-plus fa-sm"></i></a>
</nav>

<main>
    @if(ShownGames.Count == 0)
    {
        <h1 class="no-games-text">start by adding some games!</h1>
    }
    <div class="row main-container">
        <div class="col-5">
            @foreach(var game in ShownGames)
            {
                <div class="card" @onclick="@(e => ChangeShownGame(@game.Id))">
                    <svg class="game-icon">
                        <use href="game-icons.svg#@(game.ImageUri)" />
                    </svg>
                    <span class="game-title">@game.Title</span>
                </div>
            }
        </div>
        <div class="col-5">
            @if(ShownGame is not null)
            {
                <div class="card-info">
                    <div class="card-info-bar">
                        <h3>@ShownGame.Title</h3>
                        <button class="icon icon-btn" @onclick="DeleteGame"><i class="fa-solid fa-trash"></i></button>
                        <a href="edit/@ShownGame.Id" class="icon"><i class="fa-solid fa-pen"></i></a>
                        <button class="icon icon-btn" @onclick="CloseShownGame"><i class="fa-solid fa-xmark fa-lg"></i></button>
                    </div>
                    <div class="card-info-body">
                        <div class="row card-info-row">
                            <div class="col-3">
                                Rating:
                            </div>
                            <div class="col-auto">
                                @if(ShownGame.Rating is null)
                                {
                                    <span>not yet rated</span>
                                }
                                else
                                {
                                    @for(int i = 1; i <= 5; i++)
                                    {
                                        @if(rating > 1)
                                        {
                                            <svg class="star">
                                                <use href="stars.svg#icon-star" fill="#86BBBD" />
                                            </svg>
                                        }
                                        else if(rating == 1)
                                        {
                                            <svg class="star">
                                                <use href="stars.svg#icon-star-half" />
                                            </svg>
                                        }
                                        else{
                                            <svg class="star">
                                                <use href="stars.svg#icon-star" fill="#76949F" />
                                            </svg>
                                        }
                                        rating -= 2;
                                    }
                                }
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Release Date:
                            </div>
                            <div class="col-auto">
                                @ShownGame.ReleaseTime.ToShortDateString()
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Playing Since:
                            </div>
                            <div class="col-auto">
                                @ShownGame.PlayingSinceTime.ToShortDateString()
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Tags:
                            </div>
                            <div class="col-auto">
                                @for (int i = 0; i < ShownGame.Tags.Count; i++)
                                {
                                    <span>@ShownGame.Tags[i]@(i < ShownGame.Tags.Count - 1 ? ", " : "")</span>
                                }
                            </div>
                        </div>
                        <div class="row card-info-row">
                            <div class="col-3">
                                Desc:
                            </div>
                            <div class="col-auto">
                                @ShownGame.Description
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</main>

@code {
    List<GameDto> Games = new List<GameDto>();
    List<GameDto> ShownGames = new List<GameDto>();
    public GameDto ShownGame; 

    public int? rating;

    protected override async Task OnInitializedAsync()
    {
        Games = await HttpClient.GetFromJsonAsync<List<GameDto>>(NavigationManager.BaseUri + "api/games") ?? Games;
        ShownGames = new List<GameDto>(Games);
    } 

    public void ShowGames(ChangeEventArgs e)
    {
        var searchQuery = e.Value.ToString();
        ShownGames = Games
            .Where(game => game.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        game.Tags.Any(tag => tag.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    public void ChangeShownGame(int id)
    {
        ShownGame = Games.Find(g => g.Id == id);
        rating = ShownGame.Rating;
    }

    public void CloseShownGame()
    {
        ShownGame = null;
        StateHasChanged();
    }

    public async void DeleteGame()
    {
        Console.WriteLine("click");
        if(ShownGame is null)
        {
            return;
        }
        string id = ShownGame.Id.ToString();
        var requestUri = new Uri(new Uri(NavigationManager.BaseUri), $"api/games/{id}");
        using HttpResponseMessage response = await HttpClient.DeleteAsync(requestUri);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Deleted successfully");
            NavigationManager.Refresh();
        }
        else
        {
            Console.WriteLine("somethings wrong");
            NavigationManager.Refresh();
        }
    }
}